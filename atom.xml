<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fine later, feeling</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://suzumi.github.io/"/>
  <updated>2017-04-04T10:48:07.000Z</updated>
  <id>https://suzumi.github.io/</id>
  
  <author>
    <name>suzumi49n</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>オンライン英会話を始めて1000分経った</title>
    <link href="https://suzumi.github.io/2017/04/04/english-1000/"/>
    <id>https://suzumi.github.io/2017/04/04/english-1000/</id>
    <published>2017-04-04T10:21:00.000Z</published>
    <updated>2017-04-04T10:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>DMM英会話を1月中旬から始めて1000分（16時間強）以上経ったので一度振り返ってみる。<br>今年の目標は英語を頑張るということで<a href="https://suzumi.github.io/2017/01/04/new-2017/">今年の目標エントリ</a>にも書いたので続けて学習しています。</p>
<a id="more"></a>
<h2 id="モチベーション"><a href="#モチベーション" class="headerlink" title="モチベーション"></a>モチベーション</h2><p>英語を勉強するモチベーションは海外企業で働くこと。<br>今後のアメリカの情勢が新大統領になってからよく分からなくなったけど今のところはシリコンバレーで働きたい欲は変わらずある。</p>
<h2 id="オンライン英会話をしてみて"><a href="#オンライン英会話をしてみて" class="headerlink" title="オンライン英会話をしてみて"></a>オンライン英会話をしてみて</h2><p>去年の4月頃から同じオンライン英会話で有名なレアジョブを始めた。<br>フィリピン人しかいないということ（フィリピン人が悪いという意味ではない）と、ビデオ通話をしてくれる人が少なかった。</p>
<p>初めた理由はDMMの方が安かったのと、色んな国の人がいて時差がある分予約が夜中でも取りやすかったというのがある。<br>DMMの講師たちの何人かのレッスンを受けたけど全員がビデオ通話をしてくれる。<br>最初は恥ずかしくてこっちは音声だけにして受けたが、やはり顔を見れるメリットとジェスチャーを伝えられるメリットはコミュニケーションに大事だと気づいたのでこっちもビデオ通話でレッスンを受けるようになった。<br>（※こっちを音声だけにしてビデオないんだよねーとか言うと「OK、OK！」って言ってくれるけど少し悲しそうな顔をする）</p>
<p>するとどうだろうか。<br>こっちの意図をかなりの確率で伝えられるようになった。<br>やっぱり表情と仕草は大事ということに気付かされた。</p>
<h2 id="講師によって教え方は異なる"><a href="#講師によって教え方は異なる" class="headerlink" title="講師によって教え方は異なる"></a>講師によって教え方は異なる</h2><p>まぁ当然っちゃ当然なんだけど、講師によって教え方は異なる。<br>レッスンマテリアル（教材）は共通なので進め方はどの先生も同じ。<br>でもわからないことを説明したりするときに結構変わる。</p>
<p>身振り手振りで物を使って懇切丁寧に説明してくれる講師もいれば、Skypeのチャットボックスにタイプしながら例文を交えて教えてくれる講師もいる。</p>
<p>オンライン英会話を始める人がいれば、とりあえず色んな講師のレッスンを受けてみると良い。<br>個人的には後者の講師が好きでほぼ毎日受けている。<br>一応DMM英会話のマイページにレッスンノートというのがあって、レッスンで出てきたワードや例文など解説してくれたものを講師が記入してくれるものがある。</p>
<p>ちなみにDMM英会話はセルビア人が多い。<br>セルビアは不況だそうで副業でオンライン英会話講師をやってる人が多いそう。<br>ちなみにセルビアの平均月収は500ドル（約5万円）だが、ソフトウェアエンジニアになると3倍の1500ドル（約15万）の給与になるらしい。<br>どこの国でもソフトウェアエンジニアの年収は相対的に高いわけで、俄然海外で働きたい欲が強くなった。</p>
<h2 id="どれくらい上達したか"><a href="#どれくらい上達したか" class="headerlink" title="どれくらい上達したか"></a>どれくらい上達したか</h2><p>はい、話せません。<br>まぁ1000分（約17時間）程度で話せるようになるはずもなく。。<br>ただリスニング力はかなり上がったと思う。<br>と言っても聞き取りやすい英語でハキハキと話してくれるからで、海外のニュースや技術的な動画を見てもよくわからない。<br>でも英語耳にはなってきたと思う。</p>
<p>スピーキングは単語のボキャブラリーが増えてきただけあって単語単語で伝えられるくらいにはなった。<br>正しい文法で説明できるようになるためにはちゃんと文法を勉強する必要があるので、まずは英会話というアウトプットする機会を多くすることに重点を置きたい。</p>
<h2 id="レッスンマテリアル（教材）"><a href="#レッスンマテリアル（教材）" class="headerlink" title="レッスンマテリアル（教材）"></a>レッスンマテリアル（教材）</h2><p>マテリアルは普段「会話」というのを使ってやっている。<br>駅前とかにある英会話教室だと数万円の教材を買わされることもあるけどオンライン英会話では無料で種類も豊富にある。<br>もしオンライン英会話を始めようと思ってる人は事前に見ておくといいかもしれない。<br><a href="http://eikaiwa.dmm.com/material/" target="_blank" rel="external">教材リスト - オンライン英会話ならDMM英会話</a></p>
<h2 id="他の勉強方法"><a href="#他の勉強方法" class="headerlink" title="他の勉強方法"></a>他の勉強方法</h2><p>オンライン英会話は毎日25分コースを受けているんだけど、正直これだけだと圧倒的に少ない。<br>これだけで話せるようになる人は多分もともと話せると思う。<br>実際講師にもそう言われて、電車に乗ってる時間や休みの日、iPhoneの設定を英語にするとか何でもいいから小さなことからアクションを起こすべきだと言われた。<br>ということで通勤時間中や携帯を触る時間は英語学習アプリを開くようにしている。</p>
<p>色んな英語学習アプリを試してきたけど今のところずっと続いているアプリは「Study Now!」ってやつ。<br>とりあえず英語のニュース記事を読んでみようとそういうアプリを探しがちになる。<br>実際DLしてみると、単語や言い回しが難しくて意味わからないし、スマホだから単語を直ぐに調べづらい、あとは長文でやる気を削いでくるし正直3日とも持たない。<br>そんな中上記のアプリを見つけてDLしてみたところ、とても感動した。</p>
<p>他の英語ニュース系アプリと違うのは長文でないこと。<br>元々日本語のニュースなんだけどそれはネイティブの中の人が英語に翻訳してサマリーとして配信している。<br>そのためニュースの文章は長くなく、しかも3ブロックに分割されていてブロックごとに日本語訳がある。<br>ニュース記事のあとには文章中に出てきたワードの翻訳や、ワンポイントアドバイス、ネイティブの発音などがある。<br>意外と面白いのが編集後記というか中の人の感想みたいなのも載っていて個人的には好きだったりする。</p>
<p>「このアプリでは海外ニュースが読めて辞書機能付き！しかも辞書で調べた単語は自動で保存されて単語テストもできます！」とかそういうのは求めてない。ある程度英語に慣れてきた中級者向けで初学者には続かない。</p>
<p>こういうアプリは続けるのが大変なので英語初学者にはすごく良いアプリだと思っている。</p>
<p>まぁつらつらと書いてしまったけど、これ初学者からの視点書いてます。<br>「TOEIC満点を取るためにやった勉強法」とかそういうタイトルで書けたらいいな将来。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DMM英会話を1月中旬から始めて1000分（16時間強）以上経ったので一度振り返ってみる。&lt;br&gt;今年の目標は英語を頑張るということで&lt;a href=&quot;https://suzumi.github.io/2017/01/04/new-2017/&quot;&gt;今年の目標エントリ&lt;/a&gt;にも書いたので続けて学習しています。&lt;/p&gt;
    
    </summary>
    
    
      <category term="雑記" scheme="https://suzumi.github.io/tags/%E9%9B%91%E8%A8%98/"/>
    
      <category term="英語" scheme="https://suzumi.github.io/tags/%E8%8B%B1%E8%AA%9E/"/>
    
  </entry>
  
  <entry>
    <title>RustからWebAssemblyにコンパイルしてみる</title>
    <link href="https://suzumi.github.io/2017/01/05/rust-webassembly/"/>
    <id>https://suzumi.github.io/2017/01/05/rust-webassembly/</id>
    <published>2017-01-04T20:46:24.000Z</published>
    <updated>2017-04-04T10:14:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Rust入門者です。WebAssembly(wasm)入門者です。<br>今までNightlyではサポートされてたようですが、stableなv1.14でも試験的にWebAssemblyがサポートされたそうなので試してみます。</p>
<a id="more"></a>
<h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>Rustを入れる必要があるので入れてない場合はrustupでインストールします。<br><br>既にrustupでRustをインストールしてるけどバージョンが古い場合は<code>rustup update</code>で最新版にできます。multirust使ってる人は知りません。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># バージョン確認</span></div><div class="line">$ rustc -V</div><div class="line">rustc 1.14.0 (e8a012324 2016-12-16)</div></pre></td></tr></table></figure>
<p>新しいwasmにコンパイルするためのターゲットをインストールします。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rustup target add wasm32-unknown-emscripten</div></pre></td></tr></table></figure></p>
<p>後述の処理でcmakeが必要なので先に入れておく<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install cmake</div></pre></td></tr></table></figure></p>
<p>Emscripten SDKをダウンロードして解凍します。（ポチポチでDLしたい場合は<a href="http://kripken.github.io/emscripten-site/docs/getting_started/downloads.html#download-and-install" target="_blank" rel="external">こちら</a>）<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># DL＆解凍</span></div><div class="line">$ curl -O https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz</div><div class="line">$ tar zxvf emsdk-portable.tar.gz</div><div class="line"></div><div class="line"><span class="comment"># インストール</span></div><div class="line">$ <span class="built_in">cd</span> emsdk_portable/</div><div class="line">$ emsdk update</div><div class="line">$ emsdk install sdk-incoming-64bit</div><div class="line">$ emsdk activate sdk-incoming-64bit</div></pre></td></tr></table></figure></p>
<p><code>emsdk install sdk-incoming-64bit</code>を中でCのビルドする工程があるんですが、これがかなり長いです。(40分かかりました)</p>
<p>Emscriptenの環境変数を設定<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">source</span> ./emsdk_env.sh</div></pre></td></tr></table></figure></p>
<p><code>emcc</code>のバージョンを確認します。<br><code>1.37.0</code>以上が必要です。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ emcc -v</div><div class="line">emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld) 1.37.1</div><div class="line">（後略）</div></pre></td></tr></table></figure></p>
<h2 id="WebAssemblyの生成と実行"><a href="#WebAssemblyの生成と実行" class="headerlink" title="WebAssemblyの生成と実行"></a>WebAssemblyの生成と実行</h2><p>hello.rsを作ります。<br><figure class="highlight rust"><figcaption><span>hello.rs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</div><div class="line">  <span class="built_in">println!</span>(<span class="string">"Hello world!!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以下のコマンドで最適化オプションをつけてビルドします。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rustc --target=wasm32-unknown-emscripten hello.rs -o hello.html</div></pre></td></tr></table></figure></p>
<p>コマンドを叩いた後、2〜3分プロンプトが返って来なくてヒヤヒヤしましたが成功すると以下のファイルが生成されました。<br>いっぱい生成されたけど使ってるのは<code>hello.js</code>と<code>hello.wasm</code>だけかな？(asm.jsはオマケで生成されてるのだろうか…)</p>
<ul>
<li>hello.asm.js</li>
<li>hello.html</li>
<li>hello.js</li>
<li>hello.rs # さっき作ったファイル</li>
<li>hello.wasm</li>
<li>hello.wast</li>
</ul>
<p>Chrome CanaryもしくはFirefox Nightlyで<code>chrome://flags/</code>にアクセスしてWebAssemblyを有効にします。<br>[f:id:suzumidokoro:20170105175622p:plain]</p>
<p>pythonでもphpでもnodeでもいいですが、今回はpythonでサクッとWebサーバを立てます。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python -m SimpleHTTPServer</div></pre></td></tr></table></figure></p>
<p><code>http://localhost:8000/hello.html</code>にアクセスするとコンソールに文字が出力されていると思います。</p>
<!-- endcontent --><div class="figure figure--fullWidth"><img class="figure-img" src="emscripten.png" alt="emscriptenのコンソールに表示されている"><span class="caption">emscriptenのコンソールに表示されている</span></div><!-- content -->
<p>ということで無事WebAssemblyをブラウザで動かすことができました。</p>
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>整理するとこんな感じでしょうか。</p>
<ul>
<li>WebAssemblyは簡単に言うとブラウザでの実行を想定したバイナリフォーマット。</li>
<li>EmscriptenはLLVMベースにC/C++をJSやasm.jsに変換するコンパイラ</li>
<li>Rustコード→LLVM IRを生成する(RustのEmsctipten対応)</li>
<li>Emscriptenからwasmの生成</li>
<li>hello.html中の<code>&lt;script&gt;</code>内でwasmをロード、hello.jsの中でwasmをコンパイルして実行</li>
</ul>
<p>んーややこしい。</p>
<p>ここらへん疎いんでよくわかってないですが、もう少し深掘りしていきたいと思います。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://medium.com/@chicoxyzzy/compiling-rust-to-webassembly-guide-411066a69fde#.ww7iitlup" target="_blank" rel="external">Compiling Rust to WebAssembly Guide – Hacker Noon</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Rust入門者です。WebAssembly(wasm)入門者です。&lt;br&gt;今までNightlyではサポートされてたようですが、stableなv1.14でも試験的にWebAssemblyがサポートされたそうなので試してみます。&lt;/p&gt;
    
    </summary>
    
    
      <category term="rust" scheme="https://suzumi.github.io/tags/rust/"/>
    
      <category term="webassembly" scheme="https://suzumi.github.io/tags/webassembly/"/>
    
  </entry>
  
  <entry>
    <title>2017年意気込み</title>
    <link href="https://suzumi.github.io/2017/01/04/new-2017/"/>
    <id>https://suzumi.github.io/2017/01/04/new-2017/</id>
    <published>2017-01-03T21:05:19.000Z</published>
    <updated>2017-04-04T10:14:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>あけましておめでとうございます。<br>今日が仕事初めなのでやる気があるうちにブログを書いてます。</p>
<a id="more"></a>
<h2 id="2016年雑な振り返り"><a href="#2016年雑な振り返り" class="headerlink" title="2016年雑な振り返り"></a>2016年雑な振り返り</h2><h3 id="Scalaな1年だった"><a href="#Scalaな1年だった" class="headerlink" title="Scalaな1年だった"></a>Scalaな1年だった</h3><p>Scalaを業務でやるようになった1年だった。<br>趣味で勉強程度にやっていたけど業務でやることができた。</p>
<p>11ヶ月ほどその現場にいたけど人間関係も良好で仕事内容も面白くて、今までの現場で一番いい職場環境だった。<br>何より色々と勉強させてもらって正直離れるのは悲しかったけどTwitterでは繋がってるのでよしとしよう。（何がよしなのかはわからない）</p>
<h3 id="転職"><a href="#転職" class="headerlink" title="転職"></a>転職</h3><p>最近AbemaTVで話題な渋谷の会社に転職した。</p>
<p>エンジニアチームは技術力も高く毎日勉強になってる。<br>RESTじゃなくてGraphQLを選択したりAkka http使ったり、なんならScalaやめてgolangにしちゃいましょうとか、技術的な挑戦ができる文化も非常に楽しい。</p>
<p>会社生活で言うと、社内の自販機がコーヒー/コーラ/コーンポタージュ/お茶など種類が豊富でフリードリンクなのはお財布的に助かってて有り難い。<br>あと10時出社なのであまり電車が混まない。<br><br>一つ不安なのは会社周辺のランチが高く、毎日1000円ランチが当たり前で感覚が麻痺してきてること。</p>
<h3 id="出費が多かった"><a href="#出費が多かった" class="headerlink" title="出費が多かった"></a>出費が多かった</h3><p>特に下半期の出費が多かった。<br><br>この歳になって免許とった（30万）。教習所通ったらドライブ好きになってしまって月1〜2くらいで車運転してる。カーシェアリングって素晴らしい。<br><br>他には新型のMBP with touchbar買ったりiPhone7買ったり、でも一番よかったのは食洗機。<br><br>これはライフスタイルが変わる2016年最高の買い物だった。</p>
<p>全体的に「投資」の一年だった気がする。</p>
<h2 id="2017年目標"><a href="#2017年目標" class="headerlink" title="2017年目標"></a>2017年目標</h2><h3 id="C-Rustの勉強"><a href="#C-Rustの勉強" class="headerlink" title="C++/ Rustの勉強"></a>C++/ Rustの勉強</h3><p>システムプログラミングに興味があるので本格的にやる。<br><br>システムプログラミングといっても色々とあり、何をやりたいかはココを参考にして題目を決めたい。</p>
<p><a href="http://rkx1209.hatenablog.com/entry/2016/12/25/141543" target="_blank" rel="external">低レイヤーの歩き方</a></p>
<p>コンパイラ/ランタイムは興味あるのでここの勉強を中心に進めたいなー。</p>
<p>Web系の会社なので業務でシステムプログラミングをやることはないだろうと思うけど、ミドルウェアの開発はワンチャンありそうだなぁと思ってるので積極的に提案していきたい。<br><br>3月に社内勉強会でLTするのでそろそろお題を決めて取り掛からないとヤバイ。</p>
<p>以下の記事が面白かったのでRustで簡単なmemcachedを実装してみた的なことをしてみようかと思案中。</p>
<p><a href="http://qiita.com/make_now_just/items/f82aa9ba81a711cd3b76" target="_blank" rel="external">bashでmemcachedを実装しました！ - Qiita</a></p>
<p>ミドルウェアの勉強にもなるし徐々に低レイヤーに侵食していこうと思う。</p>
<h3 id="英語"><a href="#英語" class="headerlink" title="英語"></a>英語</h3><p>去年はオンライン英会話を半年ほどサボってしまったので今年は継続的にやるようにする。<br><br>最近は勉強会でも海外のエンジニアがセッションしたり、日本人エンジニアも英語でセッションしたりするので英語が理解できないと本当置いてきぼり。。<br><br>去年の年明けに開催されたSparkの勉強会に行ったら日本人も8割くらいいたのにセッションも質問もすべてが英語で終始「？？？」だったので危機感を感じました。</p>
<p>meetup.comだとこういう交流イベントが沢山あるので今年こそ参加していきたい。</p>
<p><a href="https://www.meetup.com/free-pub-crawl-tokyo/events/236042668/" target="_blank" rel="external">FREE Pub Crawl Tokyo</a>:embed:cite]</p>
<h3 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h3><p>今年こそは海外旅行行くこと。<br>シリコンバレーツアーなんてものもあるので、実際に現地の大手テック企業観光してモチベーションを上げたい。</p>
<p><a href="http://activities.his-j.com/TourLeaf/SFO0152.htm" target="_blank" rel="external">【H.I.S.】これが本社！シリコンバレーIT企業ツアー | 海外現地オプショナルツアー予約</a></p>
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今年もよろしくお願い致します。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;あけましておめでとうございます。&lt;br&gt;今日が仕事初めなのでやる気があるうちにブログを書いてます。&lt;/p&gt;
    
    </summary>
    
    
      <category term="雑記" scheme="https://suzumi.github.io/tags/%E9%9B%91%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>docker composeでGoの開発環境を構築する</title>
    <link href="https://suzumi.github.io/2016/12/06/docker-go/"/>
    <id>https://suzumi.github.io/2016/12/06/docker-go/</id>
    <published>2016-12-05T20:39:12.000Z</published>
    <updated>2017-04-04T10:14:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>この記事は<a href="http://qiita.com/advent-calendar/2016/tokyosw" target="_blank" rel="external">TokyoSWアドベントカレンダー</a>６日目の記事です。<br>業務では開発環境にDockerを使っていますが（といってもMySQLコンテナを立ててるだけ）、一から自分で設定したことはないので勉強のため導入してみようと思います。</p>
<a id="more"></a>
<h2 id="docker-for-macを入れる"><a href="#docker-for-macを入れる" class="headerlink" title="docker for macを入れる"></a>docker for macを入れる</h2><p>開発環境はMacを想定してます。<br>少し前までならVirtualBox上にLinuxを乗せて更にそこにDockerを入れてコンテナを乗せて…というふうにやってましたが、その時代は終わりました。</p>
<p>今はMac/Win向けに公式が出してくれているのでそれを使います。<br>これでVirtualBoxともオサラバです。</p>
<p>docker for macを入れるとメニューバーにdockerちゃんのアイコンが表示され、<br><code>docker</code>/<code>docker-machine</code>/<code>docker-compose</code>のコマンドが使えるようになります。</p>
<p>今回は主に<code>docker-compose</code>を使用して環境を構築します。</p>
<p><code>docker-compose</code>とは複数のコンテナを同時に立ち上げ、さらに連携もできる便利なオーケストレーションツールです。<br>今回はアプリ用とデータストア用のコンテナを立ち上げるので非常に有用です。</p>
<h2 id="アプリコンテナとデータストアコンテナの設定"><a href="#アプリコンテナとデータストアコンテナの設定" class="headerlink" title="アプリコンテナとデータストアコンテナの設定"></a>アプリコンテナとデータストアコンテナの設定</h2><p>普段業務ではScalaを使って仕事をしていますが、今回は趣味で開発しているGolang製のナレッジ共有ツールの開発環境をDocker化させようと思います。</p>
<p><a href="https://github.com/SnippetsBucket/snicket" target="_blank" rel="external">snicket</a></p>
<p>ちなみにgoのhttpフレームワークである<a href="https://github.com/labstack/echo" target="_blank" rel="external">echo</a>を使っています。</p>
<p>アプリとデータストアを別々のコンテナとして立てます。<br>まずアプリ用コンテナを作るために以下の内容のDockerfileを作ります。<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> golang:<span class="number">1.7</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></div></pre></td></tr></table></figure></p>
<p><code>.docker</code>ディレクトリを作成し、その下にDockerfileを置くようにしてみました。<br>これは好みがあると思いますが…<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># プロジェクトルート</span></div><div class="line">.docker</div><div class="line">└── web</div><div class="line">    └── Dockerfile</div></pre></td></tr></table></figure></p>
<p>docker-composeは<code>docker-compose.yml</code>というファイルで設定するので、プロジェクト直下にこれを置きます。<br>ファイルは以下のように設定しました。</p>
<figure class="highlight yaml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">'2'</span></div><div class="line"></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  app:</span></div><div class="line"><span class="attr">    build:</span> .docker/web</div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="number">5000</span>:<span class="number">5000</span></div><div class="line"><span class="attr">    links:</span></div><div class="line"><span class="bullet">      -</span> mongo</div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">      -</span> .:/go/src/github.com/SnippetsBucket/snicket</div><div class="line"><span class="attr">    command:</span> bash -c <span class="string">'cd /go/src/github.com/SnippetsBucket/snicket/ &amp;&amp; go run server.go'</span></div><div class="line"><span class="attr">    container_name:</span> snicket-web</div><div class="line"></div><div class="line"><span class="attr">  mongo:</span></div><div class="line"><span class="attr">    image:</span> mongo:<span class="number">3.4</span><span class="number">.0</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">    -</span> <span class="number">27017</span>:<span class="number">27017</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="attr">    - mongo-data:</span>/data/db</div><div class="line"><span class="attr">    container_name:</span> snicket-mongo</div><div class="line"></div><div class="line"><span class="attr">volumes:</span></div><div class="line"><span class="attr">  mongo-data:</span></div><div class="line"><span class="attr">    driver:</span> local</div></pre></td></tr></table></figure>
<p><code>app</code>と<code>mongo</code>の2つのコンテナを定義しています。<br><code>app</code>は先程作ったDockerfileをビルドに使い、5000番ポートを開放し、mongoコンテナに繋ぐようにしています。<br>volumesでプロジェクトルートをコンテナにマウントし、コンテナ起動時にアプリをビルドしています。</p>
<p>※GOPATHについて<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ホスト側と同じようにコンテナ内も同じようなディレクトリ構成にする必要があります。</div><div class="line">Dockerfileで指定している公式イメージには既に/goが<span class="variable">$GOPATH</span>に設定されています。</div><div class="line"></div><div class="line">ホスト側:<span class="variable">$GOPATH</span>/src/github.com/SnippetsBucket/snicket</div><div class="line">コンテナ:<span class="variable">$GOPATH</span>/src/github.com/SnippetsBucket/snicket</div></pre></td></tr></table></figure></p>
<p><code>mongo</code>のvolumesは、通常はコンテナを再起動させた場合、コンテナ内のデータは消えてしまうためデータを永続化させるためにマウントさせています。</p>
<p>この時点でディレクトリ構成はこんな感じになりました。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.docker</div><div class="line">└── web</div><div class="line">│   └── Dockerfile</div><div class="line">(中略)</div><div class="line">└── docker-compose.yml</div></pre></td></tr></table></figure>
<p>これで準備が整ったので<code>docker-compose up</code>をしてみます。<br>するとイメージのDLが行われ、ビルドされます。<br>おそらくmongoのコンソールがずらずらと表示されると思います。</p>
<p>別タブで<code>docker-compose ps</code>をしてみます。<br>コンテナ一覧の状態を見ることができます。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    Name                   Command               State                Ports</div><div class="line">-----------------------------------------------------------------------------------------</div><div class="line">snicket-mongo   /entrypoint.sh mongod            Up      0.0.0.0:27017-&gt;27017/tcp</div><div class="line">snicket-web     bash -c <span class="built_in">cd</span> /go/src/github. ...   Up      0.0.0.0:5000-&gt;5000/tcp, 8888/tcp</div></pre></td></tr></table></figure>
<p>そして最後に<code>localhost:5000</code>にブラウザからアクセスすると画面が表示されました。</p>
<p>もちろん5000番ポートを開けているのでアプリ側でも5000番をリッスンするようにしておく必要があります。</p>
<figure class="highlight go"><figcaption><span>server.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	router := router.Init()</div><div class="line">	router.Run(standard.New(<span class="string">":5000"</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>なんらかの理由でコンテナ内に入りたいときは<code>docker-compose exec &lt;サービス名&gt; bash</code>で入ることができます。<br><code>&lt;サービス名&gt;</code>とはdocker-compose.ymlに書いたサービス名たちのことです。</p>
<p>最初<code>container_name</code>の名前を指定してハマってました…。</p>
<ul>
<li><p>コードの変更は次のようにコンテナを再起動すればOKです。<br><code>docker-compose restart app</code></p>
</li>
<li><p>mongoにつなぎたいときは普通に<code>mongo</code>と打てば繋げます。</p>
</li>
</ul>
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>これでgolangの快適な開発環境ができました。</p>
<p>virtualboxを起動していない分、起動も速いですし余計なメモリも食いません。</p>
<p>docker-composeのお陰でdockerが簡単に扱えていいですね。</p>
<p>ぜひこれを機にdocker入門してみませんか？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;この記事は&lt;a href=&quot;http://qiita.com/advent-calendar/2016/tokyosw&quot;&gt;TokyoSWアドベントカレンダー&lt;/a&gt;６日目の記事です。&lt;br&gt;業務では開発環境にDockerを使っていますが（といってもMySQLコンテナを立ててるだけ）、一から自分で設定したことはないので勉強のため導入してみようと思います。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://suzumi.github.io/tags/docker/"/>
    
      <category term="golang" scheme="https://suzumi.github.io/tags/golang/"/>
    
  </entry>
  
</feed>
